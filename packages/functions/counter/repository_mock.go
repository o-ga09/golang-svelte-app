// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package counter

import (
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			GetFunc: func() (Clicks, error) {
//				panic("mock out the Get method")
//			},
//			PutFunc: func(counter Clicks) error {
//				panic("mock out the Put method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// GetFunc mocks the Get method.
	GetFunc func() (Clicks, error)

	// PutFunc mocks the Put method.
	PutFunc func(counter Clicks) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
		}
		// Put holds details about calls to the Put method.
		Put []struct {
			// Counter is the counter argument value.
			Counter Clicks
		}
	}
	lockGet sync.RWMutex
	lockPut sync.RWMutex
}

// Get calls GetFunc.
func (mock *RepositoryMock) Get() (Clicks, error) {
	if mock.GetFunc == nil {
		panic("RepositoryMock.GetFunc: method is nil but Repository.Get was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc()
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedRepository.GetCalls())
func (mock *RepositoryMock) GetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Put calls PutFunc.
func (mock *RepositoryMock) Put(counter Clicks) error {
	if mock.PutFunc == nil {
		panic("RepositoryMock.PutFunc: method is nil but Repository.Put was just called")
	}
	callInfo := struct {
		Counter Clicks
	}{
		Counter: counter,
	}
	mock.lockPut.Lock()
	mock.calls.Put = append(mock.calls.Put, callInfo)
	mock.lockPut.Unlock()
	return mock.PutFunc(counter)
}

// PutCalls gets all the calls that were made to Put.
// Check the length with:
//
//	len(mockedRepository.PutCalls())
func (mock *RepositoryMock) PutCalls() []struct {
	Counter Clicks
} {
	var calls []struct {
		Counter Clicks
	}
	mock.lockPut.RLock()
	calls = mock.calls.Put
	mock.lockPut.RUnlock()
	return calls
}
